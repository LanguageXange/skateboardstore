{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.type\";\nimport { auth, googleProvider, createUserProfile, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { SigninSuccess, SigninFailure, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from \"./user.action\"; // ALSO UPDATE THE FIREBASE.UTILS.JS FILE\n// ANY CODE THAT CALLS API COULD FAIL SO REMEMBER TO PUT IT INSIDE TRY CATCH BLOCK\n\nexport function* getSnapshotFromUser(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfile, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(SigninSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (err) {\n    yield put(SigninFailure(err.message));\n  }\n}\nexport function* googleSignIn() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUser(user);\n  } catch (err) {\n    yield put(SigninFailure(err.message));\n  }\n}\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUser(user);\n  } catch (err) {\n    yield put(SigninFailure(err.message));\n  }\n}\nexport function* isUserAuthenticate() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUser(userAuth);\n  } catch (err) {\n    yield put(SigninFailure(err));\n  }\n}\nexport function* isUserSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (err) {\n    yield put(signOutFailure(err));\n  }\n}\nexport function* isUserSignUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (err) {\n    yield put(signUpFailure(err));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUser(user, additionalData);\n} // below are takeLatest!\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticate);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, isUserSignOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, isUserSignUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onSignOutStart), call(onCheckUserSession), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/Cindy/Desktop/ecommerce/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfile","getCurrentUser","SigninSuccess","SigninFailure","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","getSnapshotFromUser","userAuth","additionalData","userRef","userSnapshot","get","id","data","err","message","googleSignIn","user","signInWithPopup","emailSignIn","payload","email","password","signInWithEmailAndPassword","isUserAuthenticate","isUserSignOut","signOut","isUserSignUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport UserActionTypes from \"./user.type\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfile,\r\n  getCurrentUser,\r\n} from \"../../firebase/firebase.utils\";\r\nimport {\r\n  SigninSuccess,\r\n  SigninFailure,\r\n  signOutFailure,\r\n  signOutSuccess,\r\n  signUpFailure,\r\n  signUpSuccess,\r\n} from \"./user.action\";\r\n\r\n// ALSO UPDATE THE FIREBASE.UTILS.JS FILE\r\n// ANY CODE THAT CALLS API COULD FAIL SO REMEMBER TO PUT IT INSIDE TRY CATCH BLOCK\r\n\r\nexport function* getSnapshotFromUser(userAuth, additionalData) {\r\n  try {\r\n    const userRef = yield call(createUserProfile, userAuth, additionalData);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(SigninSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (err) {\r\n    yield put(SigninFailure(err.message));\r\n  }\r\n}\r\n\r\nexport function* googleSignIn() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUser(user);\r\n  } catch (err) {\r\n    yield put(SigninFailure(err.message));\r\n  }\r\n}\r\n\r\nexport function* emailSignIn({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUser(user);\r\n  } catch (err) {\r\n    yield put(SigninFailure(err.message));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticate() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUser(userAuth);\r\n  } catch (err) {\r\n    yield put(SigninFailure(err));\r\n  }\r\n}\r\n\r\nexport function* isUserSignOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (err) {\r\n    yield put(signOutFailure(err));\r\n  }\r\n}\r\n\r\nexport function* isUserSignUp({ payload: { email, password, displayName } }) {\r\n  try {\r\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n  } catch (err) {\r\n    yield put(signUpFailure(err));\r\n  }\r\n}\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\r\n  yield getSnapshotFromUser(user, additionalData);\r\n}\r\n\r\n// below are takeLatest!\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticate);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, isUserSignOut);\r\n}\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_START, isUserSignUp);\r\n}\r\nexport function* onSignUpSuccess() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onSignOutStart),\r\n    call(onCheckUserSession),\r\n    call(onSignUpStart),\r\n    call(onSignUpSuccess),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}