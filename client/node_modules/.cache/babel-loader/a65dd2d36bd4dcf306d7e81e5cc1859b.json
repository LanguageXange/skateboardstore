{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cindy\\\\Desktop\\\\ecommerce\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./sign-in.styles.scss\";\nimport FormInput from \"../form-input/form-input.component\"; // FormInput and CustomButton become a reusable component for signin sign up register...\n\nimport CustomButton from \"../custom-button/custom-button.component\"; // sign in with Google\n\nimport { auth, signInWithGoogle } from \"../../firebase/firebase.utils\";\nimport { googleSignInStart } from \"../../redux/user/user.action\";\n\nclass SignIn extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        email,\n        password\n      } = this.state;\n\n      try {\n        await auth.signInWithEmailAndPassword(email, password); // if sign in succeeds we will reset email / pass to empty string\n\n        this.setState({\n          email: \"\",\n          password: \"\"\n        });\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n\n    this.handleChange = e => {\n      const {\n        value,\n        name\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  } // turn handleSubmit into async await\n\n\n  render() {\n    const {\n      googleSignInStart\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sign-in\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \" Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"email\",\n      type: \"email\",\n      label: \"Email\",\n      value: this.state.email,\n      handleChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      handleChange: this.handleChange,\n      value: this.state.password,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \" Sign In \"), /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: googleSignInStart,\n      isGoogle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, \"Sign In with Google\")));\n  }\n\n} // if you don't pass in a value for isGoogle, it will set as true\n\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart())\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["C:/Users/Cindy/Desktop/ecommerce/src/components/sign-in/sign-in.component.jsx"],"names":["React","Component","connect","FormInput","CustomButton","auth","signInWithGoogle","googleSignInStart","SignIn","constructor","props","handleSubmit","e","preventDefault","email","password","state","signInWithEmailAndPassword","setState","err","console","log","message","handleChange","value","name","target","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./sign-in.styles.scss\";\r\n\r\nimport FormInput from \"../form-input/form-input.component\";\r\n// FormInput and CustomButton become a reusable component for signin sign up register...\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\n// sign in with Google\r\nimport { auth, signInWithGoogle } from \"../../firebase/firebase.utils\";\r\nimport { googleSignInStart } from \"../../redux/user/user.action\";\r\nclass SignIn extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n  // turn handleSubmit into async await\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { email, password } = this.state;\r\n    try {\r\n      await auth.signInWithEmailAndPassword(email, password);\r\n      // if sign in succeeds we will reset email / pass to empty string\r\n      this.setState({ email: \"\", password: \"\" });\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  // destructuring\r\n  handleChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { googleSignInStart } = this.props;\r\n    return (\r\n      <div className=\"sign-in\">\r\n        <h2 className=\"title\">I already have an account</h2>\r\n        <span> Sign in with your email and password</span>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormInput\r\n            name=\"email\"\r\n            type=\"email\"\r\n            label=\"Email\"\r\n            value={this.state.email}\r\n            handleChange={this.handleChange}\r\n            required\r\n          />\r\n\r\n          <FormInput\r\n            name=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            handleChange={this.handleChange}\r\n            value={this.state.password}\r\n            required\r\n          />\r\n\r\n          <CustomButton type=\"submit\"> Sign In </CustomButton>\r\n          <CustomButton type=\"button\" onClick={googleSignInStart} isGoogle>\r\n            Sign In with Google\r\n          </CustomButton>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// if you don't pass in a value for isGoogle, it will set as true\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  googleSignInStart: () => dispatch(googleSignInStart()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);\r\n"]},"metadata":{},"sourceType":"module"}