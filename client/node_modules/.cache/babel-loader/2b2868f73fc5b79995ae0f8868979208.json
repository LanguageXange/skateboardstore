{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cindy\\\\Desktop\\\\ecommerce\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport { CollectionFetchingSelector } from \"../../redux/shop/shop.selectors.js\";\nimport CategoryPage from \"../category/category.component\";\nimport CollectionOverview from \"../../components/collections-overview/collections-overview.component\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nconst CollectionOverviewSpinner = WithSpinner(CollectionOverview);\nconst CategoryPageSpinner = WithSpinner(CategoryPage);\n\nclass ShopPage extends Component {\n  componentDidMount() {\n    const {\n      fetchAsyn\n    } = this.props;\n    fetchAsyn();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: match.path,\n      render: props => /*#__PURE__*/React.createElement(CollectionOverviewSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:categoryId`,\n      render: props => /*#__PURE__*/React.createElement(CategoryPageSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: CollectionFetchingSelector\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchAsyn: () => dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage); // TODO: DEBUG- WHEN I TYPE /shop/skateboard in the console.log it doesn't show up!!??\n// move the state to redux\n// switch to functional component\n// move ollections.map into its own child component so that we can have different categories\n// url will be localhost:3000/shop/:category\n// build a new category page\n// dynamically render the category page\n// e.g show the longboard but not other stuff\n// in App.js remember to remove 'exact' for  <Route path=\"/shop\" component={ShopPage} />\n// Migrate data to firebase\n// turn this component from functional to class component\n//BEFORE SPINNER\n//<Route exact path={match.path} component={CollectionOverview} />\n//<Route path={`${match.path}/:categoryId`} component={CategoryPage} />\n/////////////\n// if we only need state , we don't have to write constructor super\n// under the hood, if react sees the class component and state, it'll pull constructor for us\n// short hand way just say state = {isLoading:false}\n// destructure updatecollection from the mapDispatchToProps\n// using promise pattern\n// instead of doing onSnapshot, use get then\n// move the collection data to redux thunk see shop.actions.js\n// const { updateCollection } = this.props;\n// const collectionRef = firestore.collection(\"collections\");\n// collectionRef.get().then((snapshot) => {\n//   const collectionMap = convertSnapShotToMap(snapshot);\n//   updateCollection(collectionMap);\n//   this.setState({ loading: false });\n// });\n// colletions initial state is null defined in shop.reducer.js\n// this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n//   async (snapshot) => {\n//     console.log(snapshot, \"snap \");\n//     const collectionMap = convertSnapShotToMap(snapshot);\n//     console.log(collectionMap, \"collectionMap after reduce\");\n//     updateCollection(collectionMap);\n//     this.setState({ loading: false });\n//   }\n// );","map":{"version":3,"sources":["C:/Users/Cindy/Desktop/ecommerce/src/pages/shop/shop.component.jsx"],"names":["React","Component","Route","createStructuredSelector","CollectionFetchingSelector","CategoryPage","CollectionOverview","connect","fetchCollectionStartAsync","WithSpinner","CollectionOverviewSpinner","CategoryPageSpinner","ShopPage","componentDidMount","fetchAsyn","props","render","match","isCollectionFetching","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,0BAAT,QAA2C,oCAA3C;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,kBAAP,MAA+B,sEAA/B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,yBAAyB,GAAGD,WAAW,CAACH,kBAAD,CAA7C;AACA,MAAMK,mBAAmB,GAAGF,WAAW,CAACJ,YAAD,CAAvC;;AAEA,MAAMO,QAAN,SAAuBX,SAAvB,CAAiC;AAC/BY,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAgB,KAAKC,KAA3B;AACAD,IAAAA,SAAS;AACV;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkC,KAAKH,KAA7C;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAEE,KAAK,CAACE,IAFd;AAGE,MAAA,MAAM,EAAGJ,KAAD,iBACN,oBAAC,yBAAD;AACE,QAAA,SAAS,EAAEG;AADb,SAEMH,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAWE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,cADtB;AAEE,MAAA,MAAM,EAAGJ,KAAD,iBACN,oBAAC,mBAAD;AAAqB,QAAA,SAAS,EAAEG;AAAhC,SAA0DH,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF;AAoBD;;AA7B8B;;AAgCjC,MAAMK,eAAe,GAAGjB,wBAAwB,CAAC;AAC/Ce,EAAAA,oBAAoB,EAAEd;AADyB,CAAD,CAAhD;;AAIA,MAAMiB,kBAAkB,GAAIC,QAAD,KAAe;AACxCR,EAAAA,SAAS,EAAE,MAAMQ,QAAQ,CAACd,yBAAyB,EAA1B;AADe,CAAf,CAA3B;;AAIA,eAAeD,OAAO,CAACa,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,QAA7C,CAAf,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { CollectionFetchingSelector } from \"../../redux/shop/shop.selectors.js\";\r\nimport CategoryPage from \"../category/category.component\";\r\nimport CollectionOverview from \"../../components/collections-overview/collections-overview.component\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\r\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\r\n\r\nconst CollectionOverviewSpinner = WithSpinner(CollectionOverview);\r\nconst CategoryPageSpinner = WithSpinner(CategoryPage);\r\n\r\nclass ShopPage extends Component {\r\n  componentDidMount() {\r\n    const { fetchAsyn } = this.props;\r\n    fetchAsyn();\r\n  }\r\n\r\n  render() {\r\n    const { match, isCollectionFetching } = this.props;\r\n\r\n    return (\r\n      <div className=\"shop-page\">\r\n        <Route\r\n          exact\r\n          path={match.path}\r\n          render={(props) => (\r\n            <CollectionOverviewSpinner\r\n              isLoading={isCollectionFetching}\r\n              {...props}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          path={`${match.path}/:categoryId`}\r\n          render={(props) => (\r\n            <CategoryPageSpinner isLoading={isCollectionFetching} {...props} />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isCollectionFetching: CollectionFetchingSelector,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchAsyn: () => dispatch(fetchCollectionStartAsync()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\r\n\r\n// TODO: DEBUG- WHEN I TYPE /shop/skateboard in the console.log it doesn't show up!!??\r\n\r\n// move the state to redux\r\n// switch to functional component\r\n// move ollections.map into its own child component so that we can have different categories\r\n// url will be localhost:3000/shop/:category\r\n\r\n// build a new category page\r\n// dynamically render the category page\r\n// e.g show the longboard but not other stuff\r\n// in App.js remember to remove 'exact' for  <Route path=\"/shop\" component={ShopPage} />\r\n\r\n// Migrate data to firebase\r\n// turn this component from functional to class component\r\n\r\n//BEFORE SPINNER\r\n//<Route exact path={match.path} component={CollectionOverview} />\r\n//<Route path={`${match.path}/:categoryId`} component={CategoryPage} />\r\n\r\n/////////////\r\n// if we only need state , we don't have to write constructor super\r\n// under the hood, if react sees the class component and state, it'll pull constructor for us\r\n// short hand way just say state = {isLoading:false}\r\n\r\n// destructure updatecollection from the mapDispatchToProps\r\n// using promise pattern\r\n// instead of doing onSnapshot, use get then\r\n// move the collection data to redux thunk see shop.actions.js\r\n// const { updateCollection } = this.props;\r\n// const collectionRef = firestore.collection(\"collections\");\r\n// collectionRef.get().then((snapshot) => {\r\n//   const collectionMap = convertSnapShotToMap(snapshot);\r\n//   updateCollection(collectionMap);\r\n//   this.setState({ loading: false });\r\n// });\r\n// colletions initial state is null defined in shop.reducer.js\r\n// this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n//   async (snapshot) => {\r\n//     console.log(snapshot, \"snap \");\r\n//     const collectionMap = convertSnapShotToMap(snapshot);\r\n//     console.log(collectionMap, \"collectionMap after reduce\");\r\n//     updateCollection(collectionMap);\r\n//     this.setState({ loading: false });\r\n//   }\r\n// );\r\n"]},"metadata":{},"sourceType":"module"}