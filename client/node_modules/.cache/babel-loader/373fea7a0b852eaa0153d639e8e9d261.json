{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.type\";\nimport { auth, googleProvider, createUserProfile, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { SigninSuccess, SigninFailure, signOutFailure, signOutSuccess } from \"./user.action\"; // ALSO UPDATE THE FIREBASE.UTILS.JS FILE\n// ANY CODE THAT CALLS API COULD FAIL SO REMEMBER TO PUT IT INSIDE TRY CATCH BLOCK\n\nexport function* getSnapshotFromUser(userAuth) {\n  try {\n    const userRef = yield call(createUserProfile, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SigninSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (err) {\n    yield put(SigninFailure(err.message));\n  }\n}\nexport function* googleSignIn() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUser(user);\n  } catch (err) {\n    yield put(SigninFailure(err.message));\n  }\n}\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUser(user);\n  } catch (err) {\n    yield put(SigninFailure(err.message));\n  }\n}\nexport function* isUserAuthenticate() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUser(userAuth);\n  } catch (err) {\n    yield put(SigninFailure(err));\n  }\n}\nexport function* isUserSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (err) {\n    yield put(signOutFailure(err));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticate);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, isUserSignOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onSignOutStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["C:/Users/Cindy/Desktop/ecommerce/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfile","getCurrentUser","SigninSuccess","SigninFailure","signOutFailure","signOutSuccess","getSnapshotFromUser","userAuth","userRef","userSnapshot","get","id","data","err","message","googleSignIn","user","signInWithPopup","emailSignIn","payload","email","password","signInWithEmailAndPassword","isUserAuthenticate","isUserSignOut","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport UserActionTypes from \"./user.type\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfile,\r\n  getCurrentUser,\r\n} from \"../../firebase/firebase.utils\";\r\nimport {\r\n  SigninSuccess,\r\n  SigninFailure,\r\n  signOutFailure,\r\n  signOutSuccess,\r\n} from \"./user.action\";\r\n\r\n// ALSO UPDATE THE FIREBASE.UTILS.JS FILE\r\n// ANY CODE THAT CALLS API COULD FAIL SO REMEMBER TO PUT IT INSIDE TRY CATCH BLOCK\r\n\r\nexport function* getSnapshotFromUser(userAuth) {\r\n  try {\r\n    const userRef = yield call(createUserProfile, userAuth);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(SigninSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (err) {\r\n    yield put(SigninFailure(err.message));\r\n  }\r\n}\r\n\r\nexport function* googleSignIn() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUser(user);\r\n  } catch (err) {\r\n    yield put(SigninFailure(err.message));\r\n  }\r\n}\r\n\r\nexport function* emailSignIn({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUser(user);\r\n  } catch (err) {\r\n    yield put(SigninFailure(err.message));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticate() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUser(userAuth);\r\n  } catch (err) {\r\n    yield put(SigninFailure(err));\r\n  }\r\n}\r\n\r\nexport function* isUserSignOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (err) {\r\n    yield put(signOutFailure(err));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticate);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, isUserSignOut);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onSignOutStart),\r\n    call(onCheckUserSession),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}