{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyCmoEtoJeTfSDY8BHbGTiVfD1NMOILvcr0\",\n  authDomain: \"my-project-2019-1560131465554.firebaseapp.com\",\n  databaseURL: \"https://my-project-2019-1560131465554.firebaseio.com\",\n  projectId: \"my-project-2019-1560131465554\",\n  storageBucket: \"my-project-2019-1560131465554.appspot.com\",\n  messagingSenderId: \"1026039295707\",\n  appId: \"1:1026039295707:web:191268e7a65c15948426fe\",\n  measurementId: \"G-C9Y3D7ZSCR\"\n}; // async await\n// QueryReference: CRUD method, doesn't have the actual data, just referencing the place it hold the data\n// QuerySnapshot: represents actual data\n//-------------------------------//\n// firebase now has realtime database & firestore, what's the differences?\n\nfirebase.initializeApp(config);\nexport const createUserProfile = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const convertSnapShotToMap = collectionSnapshot => {\n  const transformCollection = collectionSnapshot.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformCollection, \"transformcollection before reduce\");\n  return transformCollection.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const addCollectionAndDocument = async (collectionKey, ItemsToAdd) => {\n  //const collectionRef = firestore.collection(collectionKey);\n  //console.log(collectionRef);\n  // firestore has 'batch' object\n  const batch = firestore.batch();\n  ItemsToAdd.forEach(item => {\n    const newItemDoc = firestore.collection(collectionKey).doc();\n    batch.set(newItemDoc, item);\n  });\n  return await batch.commit();\n}; //ItemsToAdd is actually an array of items defined in App.js\n// batch.commit() is a promise\n// addCollectionAndDocument function is here so that we don't need to manually enter data into firebase!!\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); // MOVE SIGN IN TO SAGAS!!!\n\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Cindy/Desktop/ecommerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfile","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertSnapShotToMap","collectionSnapshot","transformCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc","collection","auth","addCollectionAndDocument","collectionKey","ItemsToAdd","batch","forEach","item","newItemDoc","commit","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCmoEtoJeTfSDY8BHbGTiVfD1NMOILvcr0\",\r\n  authDomain: \"my-project-2019-1560131465554.firebaseapp.com\",\r\n  databaseURL: \"https://my-project-2019-1560131465554.firebaseio.com\",\r\n  projectId: \"my-project-2019-1560131465554\",\r\n  storageBucket: \"my-project-2019-1560131465554.appspot.com\",\r\n  messagingSenderId: \"1026039295707\",\r\n  appId: \"1:1026039295707:web:191268e7a65c15948426fe\",\r\n  measurementId: \"G-C9Y3D7ZSCR\",\r\n};\r\n\r\n// async await\r\n// QueryReference: CRUD method, doesn't have the actual data, just referencing the place it hold the data\r\n// QuerySnapshot: represents actual data\r\n\r\n//-------------------------------//\r\n// firebase now has realtime database & firestore, what's the differences?\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfile = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n  const snapShot = await userRef.get();\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nexport const convertSnapShotToMap = (collectionSnapshot) => {\r\n  const transformCollection = collectionSnapshot.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n\r\n  console.log(transformCollection, \"transformcollection before reduce\");\r\n  return transformCollection.reduce((acc, collection) => {\r\n    acc[collection.title.toLowerCase()] = collection;\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const addCollectionAndDocument = async (collectionKey, ItemsToAdd) => {\r\n  //const collectionRef = firestore.collection(collectionKey);\r\n  //console.log(collectionRef);\r\n\r\n  // firestore has 'batch' object\r\n  const batch = firestore.batch();\r\n\r\n  ItemsToAdd.forEach((item) => {\r\n    const newItemDoc = firestore.collection(collectionKey).doc();\r\n    batch.set(newItemDoc, item);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n//ItemsToAdd is actually an array of items defined in App.js\r\n// batch.commit() is a promise\r\n// addCollectionAndDocument function is here so that we don't need to manually enter data into firebase!!\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\n// MOVE SIGN IN TO SAGAS!!!\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}