{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cindy\\\\Desktop\\\\ecommerce\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionStartss } from \"../../redux/shop/shop.actions\";\nimport CollectionOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CategoryContainer from \"../category/category.container\";\n\nconst ShopPage = ({\n  fetchStart,\n  match\n}) => {\n  useEffect(() => {\n    fetchStart();\n  }, [fetchStart]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: match.path,\n    component: CollectionOverviewContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:categoryId`,\n    component: CategoryContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchStart: () => dispatch(fetchCollectionStartss())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage); // TODO: DEBUG- WHEN I TYPE /shop/skateboard in the console.log it doesn't show up!!??\n// move the state to redux\n// switch to functional component\n// move ollections.map into its own child component so that we can have different categories\n// url will be localhost:3000/shop/:category\n// build a new category page\n// dynamically render the category page\n// e.g show the longboard but not other stuff\n// in App.js remember to remove 'exact' for  <Route path=\"/shop\" component={ShopPage} />\n// Migrate data to firebase\n// turn this component from functional to class component\n//BEFORE SPINNER\n//<Route exact path={match.path} component={CollectionOverview} />\n//<Route path={`${match.path}/:categoryId`} component={CategoryPage} />\n/////////////\n// if we only need state , we don't have to write constructor super\n// under the hood, if react sees the class component and state, it'll pull constructor for us\n// short hand way just say state = {isLoading:false}\n// destructure updatecollection from the mapDispatchToProps\n// using promise pattern\n// instead of doing onSnapshot, use get then\n// move the collection data to redux thunk see shop.actions.js\n// const { updateCollection } = this.props;\n// const collectionRef = firestore.collection(\"collections\");\n// collectionRef.get().then((snapshot) => {\n//   const collectionMap = convertSnapShotToMap(snapshot);\n//   updateCollection(collectionMap);\n//   this.setState({ loading: false });\n// });\n// colletions initial state is null defined in shop.reducer.js\n// this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n//   async (snapshot) => {\n//     console.log(snapshot, \"snap \");\n//     const collectionMap = convertSnapShotToMap(snapshot);\n//     console.log(collectionMap, \"collectionMap after reduce\");\n//     updateCollection(collectionMap);\n//     this.setState({ loading: false });\n//   }\n// );","map":{"version":3,"sources":["C:/Users/Cindy/Desktop/ecommerce/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","connect","fetchCollectionStartss","CollectionOverviewContainer","CategoryContainer","ShopPage","fetchStart","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,sBAAT,QAAuC,+BAAvC;AAEA,OAAOC,2BAAP,MAAwC,sEAAxC;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAA2B;AAC1CR,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAEC,KAAK,CAACC,IAAzB;AAA+B,IAAA,SAAS,EAAEL,2BAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK,cAA3B;AAA0C,IAAA,SAAS,EAAEJ,iBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAXD;;AAaA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCJ,EAAAA,UAAU,EAAE,MAAMI,QAAQ,CAACR,sBAAsB,EAAvB;AADc,CAAf,CAA3B;;AAIA,eAAeD,OAAO,CAAC,IAAD,EAAOQ,kBAAP,CAAP,CAAkCJ,QAAlC,CAAf,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCollectionStartss } from \"../../redux/shop/shop.actions\";\r\n\r\nimport CollectionOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\r\nimport CategoryContainer from \"../category/category.container\";\r\n\r\nconst ShopPage = ({ fetchStart, match }) => {\r\n  useEffect(() => {\r\n    fetchStart();\r\n  }, [fetchStart]);\r\n\r\n  return (\r\n    <div className=\"shop-page\">\r\n      <Route exact path={match.path} component={CollectionOverviewContainer} />\r\n      <Route path={`${match.path}/:categoryId`} component={CategoryContainer} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchStart: () => dispatch(fetchCollectionStartss()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);\r\n\r\n// TODO: DEBUG- WHEN I TYPE /shop/skateboard in the console.log it doesn't show up!!??\r\n\r\n// move the state to redux\r\n// switch to functional component\r\n// move ollections.map into its own child component so that we can have different categories\r\n// url will be localhost:3000/shop/:category\r\n\r\n// build a new category page\r\n// dynamically render the category page\r\n// e.g show the longboard but not other stuff\r\n// in App.js remember to remove 'exact' for  <Route path=\"/shop\" component={ShopPage} />\r\n\r\n// Migrate data to firebase\r\n// turn this component from functional to class component\r\n\r\n//BEFORE SPINNER\r\n//<Route exact path={match.path} component={CollectionOverview} />\r\n//<Route path={`${match.path}/:categoryId`} component={CategoryPage} />\r\n\r\n/////////////\r\n// if we only need state , we don't have to write constructor super\r\n// under the hood, if react sees the class component and state, it'll pull constructor for us\r\n// short hand way just say state = {isLoading:false}\r\n\r\n// destructure updatecollection from the mapDispatchToProps\r\n// using promise pattern\r\n// instead of doing onSnapshot, use get then\r\n// move the collection data to redux thunk see shop.actions.js\r\n// const { updateCollection } = this.props;\r\n// const collectionRef = firestore.collection(\"collections\");\r\n// collectionRef.get().then((snapshot) => {\r\n//   const collectionMap = convertSnapShotToMap(snapshot);\r\n//   updateCollection(collectionMap);\r\n//   this.setState({ loading: false });\r\n// });\r\n// colletions initial state is null defined in shop.reducer.js\r\n// this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n//   async (snapshot) => {\r\n//     console.log(snapshot, \"snap \");\r\n//     const collectionMap = convertSnapShotToMap(snapshot);\r\n//     console.log(collectionMap, \"collectionMap after reduce\");\r\n//     updateCollection(collectionMap);\r\n//     this.setState({ loading: false });\r\n//   }\r\n// );\r\n"]},"metadata":{},"sourceType":"module"}